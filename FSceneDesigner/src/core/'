#ifndef _SN_T_ENTITY2D_INL_
#define _SN_T_ENTITY2D_INL_ 

template<typename T> 
TSnEntity2D<T>::TSnEntity2D 
{
	m_array=Faeris::FsArray::create();
	m_className=T::getClassName();
}

template<typename T> 
TSnEntity2D<T>::~TSnEntity2D()
{
	m_array->destroy();
}


template<typename T> 
int TSnEntity2D<T>::identifyType()
{
	return 	SN_CLASS_T_ENTITY2D;
}

template<typename T>
const char* TSnEntity2D<T>::identifyTypeName()
{
	return "TSnEntity2D";
}

template<typename T>
SnIdentify* TSnEntity2D<T>::getIdentifyParent()
{
	Faeris::Entity* ep=T::getParent();
	Faeris::Layer* ly=T::getLayer();
	if(ep==NULL)
	{
		return dynamic_cast<SnIdentify*>(ly);

	}
	return dynamic_cast<SnIdentify*>(ep);
}

template<typename T>
void TSnEntity2D<T>::addIdentifyChild(SnIdentify* identify)
{
	Faeris::Entity2D* en=dynamic_cast<Faeris::Entity2D*>(identify);
	T::addChild(en);
	m_array->push(en);
}

template<typename T>
void TSnEntity2D<T>::removeIdentifyChild(SnIdentify* identify)
{
	Faeris::Entity2D* en=dynamic_cast<Faeris::Entity2D*>(identify);
	T::removeChild(en);
	m_array->remove(en);
}

template<typename T>
void TSnEntity2D<T>::clearIdentifyChild()
{
	m_array->clear();
	T::clearChild();
}

template<typename T>
int TSnEntity2D<T>::getIdentifyChildNu()
{
	return m_array->size();
}

template<typename T>
SnIdentify* TSnEntity2D<T>:;getIdentifyChild(int index)
{
	Faeris::Entity2D* en=(Faeris::Entity2D*)m_array->get(index);
	return dynamic_cast<SnIdentify*>(en);
}

template<typename T>
int TSnEntity2D<T>::getIdentifyChildIndex(SnIdentify* id)
{
	Faeris::Entity2D* en=dynamic_cast<Faeris::Entity2D*>(id);
	int size=m_array->size();
	for(int i=0;i<size;i++)
	{
		if(en==m_array->get(i))
		{
			return i;
		}
	}

	return 0;
}

template<typename T>
std::vector<SnIdentify*> TSnEntity2D<T>::getChildInArea(Faeris::Vector2f& start,Faeris::Vector2f& end,bool traverse)
{
	std::vector<SnIdentify* > ret;
	int size=m_array->size();
	for(int i=0;i<size;i++)
	{
		Entity2D* en=(Entity2D*)m_array->get(i);
		SnIdentify* id=dynamic_cast<SnIdentify*>(en);
		if(SnUtil::identifyInRect(id,start,end))
		{
			ret.push_back(id);
		}

		if(traverse)
		{
			std::vector<SnIdentify*> r=id->getChildInArea(start,end,traverse);
			ret.insert(ret.end(),r.begin(),r.end());
		}
	}

	return ret;
}

template<typename T>
SnIdentify* TSnEntity2D<T>::getChildHitPoint(Faeris::Vector2f point,bool traverse)
{
	int size=m_array->size();
	for(int i=size-1;i>=0;i--)
	{
		Entity2D* en=(Entity2D*)m_array->get(i);
		SnIdentify* id=dynamic_cast<SnIdentify*>(en);


		if(traverse)
		{
			SnIdentify* ret= id->getChildHitPoint(point,traverse);
			if(ret)
			{
				return ret;
			}
		}
		if(SnUtil::identifyHitPoint(id,point))
		{
			return id;
		}
	}
	return NULL;
}

template<typename T> 
SnIdentify* TSnEntity2D<T>::rotate(float angle)
{
	float r=getRotateZ();
	r+=angle;
	setRotateZ(r);
}

template<typename T> 
Faeris::Vector3f TSnEntity2D<T>::getPositionInWorld()
{
	return T::getPositionInWorld();
}











#endif /*_SN_T_ENTITY2D_INL_*/
